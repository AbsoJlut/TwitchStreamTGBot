import json
import logging
import asyncio
import os
import signal
import locale
from datetime import datetime, timezone
import pytz
from twitchAPI.twitch import Twitch
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.error import BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('log.txt'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    logger.warning("–õ–æ–∫–∞–ª—å ru_RU.UTF-8 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)
    special_chars = r'_[]()~`>#+-=|{}.!?\'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def format_duration(seconds, always_show_hours=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ 'X —á Y –º–∏–Ω' –∏–ª–∏ 'Y –º–∏–Ω'."""
    minutes = seconds // 60
    hours = minutes // 60
    remaining_minutes = minutes % 60
    if always_show_hours or hours > 0:
        return f"{hours} —á {remaining_minutes} –º–∏–Ω"
    return f"{minutes} –º–∏–Ω"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open('config.json') as f:
        config = json.load(f)
except FileNotFoundError:
    logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    raise
except json.JSONDecodeError:
    logger.error("–§–∞–π–ª config.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
    raise

required_keys = ['TWITCH_CLIENT_ID', 'TWITCH_CLIENT_SECRET', 'TELEGRAM_TOKEN', 'CHANNEL_ID', 'STREAMER']
missing_keys = [key for key in required_keys if key not in config]
if missing_keys:
    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ config.json: {', '.join(missing_keys)}")
    raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {', '.join(missing_keys)}")

TWITCH_CLIENT_ID = config['TWITCH_CLIENT_ID']
TWITCH_CLIENT_SECRET = config['TWITCH_CLIENT_SECRET']
TELEGRAM_TOKEN = config['TELEGRAM_TOKEN']
CHANNEL_ID = config['CHANNEL_ID']
STREAMER = config['STREAMER']
DISPLAY_NAME = config.get('DISPLAY_NAME', STREAMER)  # –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
ALWAYS_SHOW_HOURS = config.get('ALWAYS_SHOW_HOURS', False)  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—Å—ã
SOCIAL_LINKS = config.get('SOCIAL_LINKS', {})  # –°–æ—Ü—Å–µ—Ç–∏
START_TIME = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
message_id = None
is_streaming = False
last_message_text = None
last_stream_data = None

async def get_twitch_client():
    try:
        twitch = Twitch(TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET)
        await twitch.authenticate_app([])
        logger.info("Twitch API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return twitch
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Twitch API: {e}", exc_info=True)
        return None

async def get_stream_info(twitch):
    try:
        async for stream in twitch.get_streams(user_login=[STREAMER]):
            return {
                'title': stream.title,
                'game_name': stream.game_name,
                'thumbnail_url': stream.thumbnail_url.format(width=1920, height=1080),
                'started_at': stream.started_at,
                'viewer_count': stream.viewer_count
            }
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–∞ –¥–ª—è {STREAMER}: {e}", exc_info=True)
        return None

async def send_or_update_message(bot, stream_info, is_ended=False):
    global message_id, last_message_text, last_stream_data
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–º–∞
        now = datetime.now(timezone.utc)
        duration_seconds = int((now - stream_info['started_at']).total_seconds())
        duration_minutes = duration_seconds // 60

        # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∏–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_stream_data = {
            'title': stream_info['title'],
            'game_name': stream_info['game_name'],
            'viewer_count': stream_info['viewer_count'],
            'thumbnail_url': stream_info['thumbnail_url'],
            'started_at': stream_info['started_at'],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º started_at
            'duration_minutes': duration_minutes  # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        }
        
        if not is_ended:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            update_needed = last_stream_data is None or current_stream_data != last_stream_data
            if not update_needed:
                logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {STREAMER} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                return
            if last_stream_data:
                changes = {k: v for k, v in current_stream_data.items() if last_stream_data.get(k) != v}
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {STREAMER}: {changes}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_ended:
            message_text = (
                f"*{escape_markdown_v2(DISPLAY_NAME)}*\n"
                f"*üé¨* {escape_markdown_v2(stream_info['title'])}*\n\n"
                f"*–ò–≥—Ä–∞*: {escape_markdown_v2(stream_info['game_name'])}*\n"
                f"*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*: {escape_markdown_v2(format_duration(duration_seconds, ALWAYS_SHOW_HOURS))}*\n\n"
                f"*–°–æ—Ü—Å–µ—Ç–∏*:\n"
            )
            for name, url in SOCIAL_LINKS.items():
                message_text += f"[{escape_markdown_v2(name.capitalize())}]({url})\n"
            message_text += f"[Twitch](https://www.twitch.tv/{STREAMER})\n\n"
            message_text += f"*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∏–º–∞\\!*"
            reply_markup = None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
        else:
            message_text = (
                f"*{escape_markdown_v2(DISPLAY_NAME)}*\n"
                f"*üé¨*: {escape_markdown_v2(stream_info['title'])}*\n\n"
                f"*–ò–≥—Ä–∞* {escape_markdown_v2(stream_info['game_name'])}*\n"
                f"*–ó—Ä–∏—Ç–µ–ª–∏*: {stream_info['viewer_count']}*\n"
                f"*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å*: {escape_markdown_v2(format_duration(duration_seconds, ALWAYS_SHOW_HOURS))}*\n\n"
                f"*–°–æ—Ü—Å–µ—Ç–∏*:\n"
            )
            for name, url in SOCIAL_LINKS.items():
                message_text += f"[{escape_markdown_v2(name.capitalize())}]({url})\n"
            message_text += f"[Twitch](https://www.twitch.tv/{STREAMER})"
            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∏–º",
                        url=f"https://www.twitch.tv/{STREAMER}"
                    )]
                ]
            )

        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")

        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for attempt in range(3):
            try:
                if message_id is None:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                    message = await bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=stream_info['thumbnail_url'],
                        caption=message_text,
                        parse_mode='MarkdownV2',
                        reply_markup=reply_markup
                    )
                    message_id = message.message_id
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {STREAMER}: message_id={message_id}")
                    break
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.edit_message_media(
                        chat_id=CHANNEL_ID,
                        message_id=message_id,
                        media=InputMediaPhoto(
                            media=stream_info['thumbnail_url'],
                            caption=message_text,
                            parse_mode='MarkdownV2'
                        ),
                        reply_markup=reply_markup
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {STREAMER}: message_id={message_id}")
                    break
            except BadRequest as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MarkdownV2: {e}. –¢–µ–∫—Å—Ç: {message_text}", exc_info=True)
                if "message is not modified" in str(e).lower():
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {STREAMER} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    return
                if attempt == 2:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
                    unescaped_text = message_text.replace('\\', '')
                    if message_id is None:
                        message = await bot.send_photo(
                            chat_id=CHANNEL_ID,
                            photo=stream_info['thumbnail_url'],
                            caption=unescaped_text,
                            reply_markup=reply_markup
                        )
                        message_id = message.message_id
                        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –¥–ª—è {STREAMER}: message_id={message_id}")
                    else:
                        await bot.edit_message_media(
                            chat_id=CHANNEL_ID,
                            message_id=message_id,
                            media=InputMediaPhoto(
                                media=stream_info['thumbnail_url'],
                                caption=unescaped_text
                            ),
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –¥–ª—è {STREAMER}: message_id={message_id}")
                    break
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}", exc_info=True)
                if attempt == 2:
                    raise
                await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

        last_message_text = message_text
        if not is_ended:
            last_stream_data = current_stream_data

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}", exc_info=True)
        if message_id is not None and "message to edit not found" in str(e).lower():
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º message_id: {message_id}")
            message_id = None
            last_message_text = None
            last_stream_data = None

async def check_stream():
    global is_streaming, message_id, last_stream_data
    twitch = None
    bot = Bot(token=TELEGRAM_TOKEN)

    while True:
        try:
            if twitch is None:
                twitch = await get_twitch_client()
                if twitch is None:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Twitch –∫–ª–∏–µ–Ω—Ç, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥")
                    await asyncio.sleep(60)
                    continue

            logger.debug("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞")
            stream_info = await get_stream_info(twitch)
            is_streaming_now = stream_info is not None

            if is_streaming_now and not is_streaming:
                is_streaming = True
                await send_or_update_message(bot, stream_info, is_ended=False)
                logger.info(f"–°—Ç—Ä–∏–º {STREAMER} –Ω–∞—á–∞–ª—Å—è")
            elif not is_streaming_now and is_streaming:
                is_streaming = False
                if message_id is not None and last_stream_data is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
                    required_keys = {'title', 'game_name', 'thumbnail_url', 'started_at', 'viewer_count'}
                    if all(key in last_stream_data for key in required_keys):
                        last_stream_info = {
                            'title': last_stream_data['title'],
                            'game_name': last_stream_data['game_name'],
                            'thumbnail_url': last_stream_data['thumbnail_url'],
                            'started_at': last_stream_data['started_at'],
                            'viewer_count': last_stream_data['viewer_count']
                        }
                        await send_or_update_message(bot, last_stream_info, is_ended=True)
                        logger.info(f"–°—Ç—Ä–∏–º {STREAMER} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    else:
                        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: last_stream_data={last_stream_data}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={message_id}, last_stream_data={last_stream_data}")
                message_id = None
                last_message_text = None
                last_stream_data = None
                logger.info(f"–°—Ç—Ä–∏–º {STREAMER} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, message_id —Å–±—Ä–æ—à–µ–Ω")
            elif is_streaming_now and is_streaming:
                await send_or_update_message(bot, stream_info, is_ended=False)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_stream: {e}", exc_info=True)
            twitch = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        await asyncio.sleep(60)

async def shutdown():
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {START_TIME}")
    tasks = [task for task in asyncio.all_tasks() if task is not asyncio.current_task()]
    for task in tasks:
        logger.debug(f"–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏: {task}")
        task.cancel()
    await asyncio.sleep(0.1)

async def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –í—Ä–µ–º—è: {START_TIME}")
    loop = asyncio.get_running_loop()
    stop = loop.create_future()

    loop.add_signal_handler(signal.SIGTERM, lambda: stop.set_result(None))
    loop.add_signal_handler(signal.SIGINT, lambda: stop.set_result(None))

    loop.create_task(check_stream())

    try:
        await stop
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
    finally:
        await shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)